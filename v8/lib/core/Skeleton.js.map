{"version":3,"file":"Skeleton.js","sources":["../../src/core/Skeleton.ts"],"sourcesContent":["import { Attachment, RegionAttachment, MeshAttachment, PathAttachment } from './attachments';\r\nimport { Bone } from './Bone';\r\nimport { Slot } from './Slot';\r\nimport type { Updatable } from './Updatable';\r\nimport type { SkeletonData } from './SkeletonData';\r\nimport { IkConstraint } from './IkConstraint';\r\nimport { TransformConstraint } from './TransformConstraint';\r\nimport { PathConstraint } from './PathConstraint';\r\nimport type { Skin } from './Skin';\r\nimport { Color, MathUtils, NumberArrayLike, settings, Utils, Vector2, ISkeleton } from '@pixi-spine/base';\r\n\r\n/** Stores the current pose for a skeleton.\r\n *\r\n * See [Instance objects](http://esotericsoftware.com/spine-runtime-architecture#Instance-objects) in the Spine Runtimes Guide.\r\n * @public\r\n * */\r\nexport class Skeleton implements ISkeleton<SkeletonData, Bone, Slot, Skin> {\r\n    /** The skeleton's setup pose data. */\r\n    data: SkeletonData;\r\n\r\n    /** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\r\n    bones: Array<Bone>;\r\n\r\n    /** The skeleton's slots. */\r\n    slots: Array<Slot>;\r\n\r\n    /** The skeleton's slots in the order they should be drawn. The returned array may be modified to change the draw order. */\r\n    drawOrder: Array<Slot>;\r\n\r\n    /** The skeleton's IK constraints. */\r\n    ikConstraints: Array<IkConstraint>;\r\n\r\n    /** The skeleton's transform constraints. */\r\n    transformConstraints: Array<TransformConstraint>;\r\n\r\n    /** The skeleton's path constraints. */\r\n    pathConstraints: Array<PathConstraint>;\r\n\r\n    /** The list of bones and constraints, sorted in the order they should be updated, as computed by {@link #updateCache()}. */\r\n    _updateCache = new Array<Updatable>();\r\n\r\n    /** The skeleton's current skin. May be null. */\r\n    skin: Skin | null = null;\r\n\r\n    /** The color to tint all the skeleton's attachments. */\r\n    color: Color;\r\n\r\n    /** Scales the entire skeleton on the X axis. This affects all bones, even if the bone's transform mode disallows scale\r\n     * inheritance. */\r\n    scaleX = 1;\r\n\r\n    /** Scales the entire skeleton on the Y axis. This affects all bones, even if the bone's transform mode disallows scale\r\n     * inheritance. */\r\n    scaleY = 1;\r\n\r\n    /** Sets the skeleton X position, which is added to the root bone worldX position. */\r\n    x = 0;\r\n\r\n    /** Sets the skeleton Y position, which is added to the root bone worldY position. */\r\n    y = 0;\r\n\r\n    constructor(data: SkeletonData) {\r\n        if (!data) throw new Error('data cannot be null.');\r\n        this.data = data;\r\n\r\n        this.bones = new Array<Bone>();\r\n        for (let i = 0; i < data.bones.length; i++) {\r\n            const boneData = data.bones[i];\r\n            let bone: Bone;\r\n\r\n            if (!boneData.parent) bone = new Bone(boneData, this, null);\r\n            else {\r\n                const parent = this.bones[boneData.parent.index];\r\n\r\n                bone = new Bone(boneData, this, parent);\r\n                parent.children.push(bone);\r\n            }\r\n            this.bones.push(bone);\r\n        }\r\n\r\n        this.slots = new Array<Slot>();\r\n        this.drawOrder = new Array<Slot>();\r\n        for (let i = 0; i < data.slots.length; i++) {\r\n            const slotData = data.slots[i];\r\n            const bone = this.bones[slotData.boneData.index];\r\n            const slot = new Slot(slotData, bone);\r\n\r\n            this.slots.push(slot);\r\n            this.drawOrder.push(slot);\r\n        }\r\n\r\n        this.ikConstraints = new Array<IkConstraint>();\r\n        for (let i = 0; i < data.ikConstraints.length; i++) {\r\n            const ikConstraintData = data.ikConstraints[i];\r\n\r\n            this.ikConstraints.push(new IkConstraint(ikConstraintData, this));\r\n        }\r\n\r\n        this.transformConstraints = new Array<TransformConstraint>();\r\n        for (let i = 0; i < data.transformConstraints.length; i++) {\r\n            const transformConstraintData = data.transformConstraints[i];\r\n\r\n            this.transformConstraints.push(new TransformConstraint(transformConstraintData, this));\r\n        }\r\n\r\n        this.pathConstraints = new Array<PathConstraint>();\r\n        for (let i = 0; i < data.pathConstraints.length; i++) {\r\n            const pathConstraintData = data.pathConstraints[i];\r\n\r\n            this.pathConstraints.push(new PathConstraint(pathConstraintData, this));\r\n        }\r\n\r\n        this.color = new Color(1, 1, 1, 1);\r\n        this.updateCache();\r\n    }\r\n\r\n    /** Caches information about bones and constraints. Must be called if the {@link #getSkin()} is modified or if bones,\r\n     * constraints, or weighted path attachments are added or removed. */\r\n    updateCache() {\r\n        const updateCache = this._updateCache;\r\n\r\n        updateCache.length = 0;\r\n\r\n        const bones = this.bones;\r\n\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            const bone = bones[i];\r\n\r\n            bone.sorted = bone.data.skinRequired;\r\n            bone.active = !bone.sorted;\r\n        }\r\n\r\n        if (this.skin) {\r\n            const skinBones = this.skin.bones;\r\n\r\n            for (let i = 0, n = this.skin.bones.length; i < n; i++) {\r\n                let bone: Bone | null = this.bones[skinBones[i].index];\r\n\r\n                do {\r\n                    bone.sorted = false;\r\n                    bone.active = true;\r\n                    bone = bone.parent;\r\n                } while (bone);\r\n            }\r\n        }\r\n\r\n        // IK first, lowest hierarchy depth first.\r\n        const ikConstraints = this.ikConstraints;\r\n        const transformConstraints = this.transformConstraints;\r\n        const pathConstraints = this.pathConstraints;\r\n        const ikCount = ikConstraints.length;\r\n        const transformCount = transformConstraints.length;\r\n        const pathCount = pathConstraints.length;\r\n        const constraintCount = ikCount + transformCount + pathCount;\r\n\r\n        // eslint-disable-next-line no-restricted-syntax, no-labels\r\n        outer: for (let i = 0; i < constraintCount; i++) {\r\n            for (let ii = 0; ii < ikCount; ii++) {\r\n                const constraint = ikConstraints[ii];\r\n\r\n                if (constraint.data.order == i) {\r\n                    this.sortIkConstraint(constraint);\r\n                    // eslint-disable-next-line no-labels\r\n                    continue outer;\r\n                }\r\n            }\r\n            for (let ii = 0; ii < transformCount; ii++) {\r\n                const constraint = transformConstraints[ii];\r\n\r\n                if (constraint.data.order == i) {\r\n                    this.sortTransformConstraint(constraint);\r\n                    // eslint-disable-next-line no-labels\r\n                    continue outer;\r\n                }\r\n            }\r\n            for (let ii = 0; ii < pathCount; ii++) {\r\n                const constraint = pathConstraints[ii];\r\n\r\n                if (constraint.data.order == i) {\r\n                    this.sortPathConstraint(constraint);\r\n                    // eslint-disable-next-line no-labels\r\n                    continue outer;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0, n = bones.length; i < n; i++) this.sortBone(bones[i]);\r\n    }\r\n\r\n    sortIkConstraint(constraint: IkConstraint) {\r\n        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\r\n        if (!constraint.active) return;\r\n\r\n        const target = constraint.target;\r\n\r\n        this.sortBone(target);\r\n\r\n        const constrained = constraint.bones;\r\n        const parent = constrained[0];\r\n\r\n        this.sortBone(parent);\r\n\r\n        if (constrained.length == 1) {\r\n            this._updateCache.push(constraint);\r\n            this.sortReset(parent.children);\r\n        } else {\r\n            const child = constrained[constrained.length - 1];\r\n\r\n            this.sortBone(child);\r\n\r\n            this._updateCache.push(constraint);\r\n\r\n            this.sortReset(parent.children);\r\n            child.sorted = true;\r\n        }\r\n    }\r\n\r\n    sortPathConstraint(constraint: PathConstraint) {\r\n        constraint.active = constraint.target.bone.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\r\n        if (!constraint.active) return;\r\n\r\n        const slot = constraint.target;\r\n        const slotIndex = slot.data.index;\r\n        const slotBone = slot.bone;\r\n\r\n        if (this.skin) this.sortPathConstraintAttachment(this.skin, slotIndex, slotBone);\r\n        if (this.data.defaultSkin && this.data.defaultSkin != this.skin) this.sortPathConstraintAttachment(this.data.defaultSkin, slotIndex, slotBone);\r\n        for (let i = 0, n = this.data.skins.length; i < n; i++) this.sortPathConstraintAttachment(this.data.skins[i], slotIndex, slotBone);\r\n\r\n        const attachment = slot.getAttachment();\r\n\r\n        if (attachment instanceof PathAttachment) this.sortPathConstraintAttachmentWith(attachment, slotBone);\r\n\r\n        const constrained = constraint.bones;\r\n        const boneCount = constrained.length;\r\n\r\n        for (let i = 0; i < boneCount; i++) this.sortBone(constrained[i]);\r\n\r\n        this._updateCache.push(constraint);\r\n\r\n        for (let i = 0; i < boneCount; i++) this.sortReset(constrained[i].children);\r\n        for (let i = 0; i < boneCount; i++) constrained[i].sorted = true;\r\n    }\r\n\r\n    sortTransformConstraint(constraint: TransformConstraint) {\r\n        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\r\n        if (!constraint.active) return;\r\n\r\n        this.sortBone(constraint.target);\r\n\r\n        const constrained = constraint.bones;\r\n        const boneCount = constrained.length;\r\n\r\n        if (constraint.data.local) {\r\n            for (let i = 0; i < boneCount; i++) {\r\n                const child = constrained[i];\r\n\r\n                this.sortBone(child.parent);\r\n                this.sortBone(child);\r\n            }\r\n        } else {\r\n            for (let i = 0; i < boneCount; i++) {\r\n                this.sortBone(constrained[i]);\r\n            }\r\n        }\r\n\r\n        this._updateCache.push(constraint);\r\n\r\n        for (let i = 0; i < boneCount; i++) this.sortReset(constrained[i].children);\r\n        for (let i = 0; i < boneCount; i++) constrained[i].sorted = true;\r\n    }\r\n\r\n    sortPathConstraintAttachment(skin: Skin, slotIndex: number, slotBone: Bone) {\r\n        const attachments = skin.attachments[slotIndex];\r\n\r\n        if (!attachments) return;\r\n        for (const key in attachments) {\r\n            this.sortPathConstraintAttachmentWith(attachments[key], slotBone);\r\n        }\r\n    }\r\n\r\n    sortPathConstraintAttachmentWith(attachment: Attachment, slotBone: Bone) {\r\n        if (!(attachment instanceof PathAttachment)) return;\r\n        const pathBones = (<PathAttachment>attachment).bones;\r\n\r\n        if (!pathBones) this.sortBone(slotBone);\r\n        else {\r\n            const bones = this.bones;\r\n\r\n            for (let i = 0, n = pathBones.length; i < n; ) {\r\n                let nn = pathBones[i++];\r\n\r\n                nn += i;\r\n                while (i < nn) this.sortBone(bones[pathBones[i++]]);\r\n            }\r\n        }\r\n    }\r\n\r\n    sortBone(bone: Bone) {\r\n        if (!bone) return;\r\n        if (bone.sorted) return;\r\n        const parent = bone.parent;\r\n\r\n        if (parent) this.sortBone(parent);\r\n        bone.sorted = true;\r\n        this._updateCache.push(bone);\r\n    }\r\n\r\n    sortReset(bones: Array<Bone>) {\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            const bone = bones[i];\r\n\r\n            if (!bone.active) continue;\r\n            if (bone.sorted) this.sortReset(bone.children);\r\n            bone.sorted = false;\r\n        }\r\n    }\r\n\r\n    /** Updates the world transform for each bone and applies all constraints.\r\n     *\r\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\r\n     * Runtimes Guide. */\r\n    updateWorldTransform() {\r\n        const bones = this.bones;\r\n\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            const bone = bones[i];\r\n\r\n            bone.ax = bone.x;\r\n            bone.ay = bone.y;\r\n            bone.arotation = bone.rotation;\r\n            bone.ascaleX = bone.scaleX;\r\n            bone.ascaleY = bone.scaleY;\r\n            bone.ashearX = bone.shearX;\r\n            bone.ashearY = bone.shearY;\r\n        }\r\n\r\n        const updateCache = this._updateCache;\r\n\r\n        for (let i = 0, n = updateCache.length; i < n; i++) updateCache[i].update();\r\n    }\r\n\r\n    updateWorldTransformWith(parent: Bone) {\r\n        // Apply the parent bone transform to the root bone. The root bone always inherits scale, rotation and reflection.\r\n        const rootBone = this.getRootBone();\r\n        const pa = parent.matrix.a;\r\n        const pb = parent.matrix.c;\r\n        const pc = parent.matrix.b;\r\n        const pd = parent.matrix.d;\r\n\r\n        rootBone.matrix.tx = pa * this.x + pb * this.y + parent.worldX;\r\n        rootBone.matrix.ty = pc * this.x + pd * this.y + parent.worldY;\r\n\r\n        const rotationY = rootBone.rotation + 90 + rootBone.shearY;\r\n        const la = MathUtils.cosDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX;\r\n        const lb = MathUtils.cosDeg(rotationY) * rootBone.scaleY;\r\n        const lc = MathUtils.sinDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX;\r\n        const ld = MathUtils.sinDeg(rotationY) * rootBone.scaleY;\r\n\r\n        const sx = this.scaleX;\r\n        const sy = settings.yDown ? -this.scaleY : this.scaleY;\r\n\r\n        rootBone.matrix.a = (pa * la + pb * lc) * sx;\r\n        rootBone.matrix.c = (pa * lb + pb * ld) * sx;\r\n        rootBone.matrix.b = (pc * la + pd * lc) * sy;\r\n        rootBone.matrix.d = (pc * lb + pd * ld) * sy;\r\n\r\n        // Update everything except root bone.\r\n        const updateCache = this._updateCache;\r\n\r\n        for (let i = 0, n = updateCache.length; i < n; i++) {\r\n            const updatable = updateCache[i];\r\n\r\n            if (updatable != rootBone) updatable.update();\r\n        }\r\n    }\r\n\r\n    /** Sets the bones, constraints, and slots to their setup pose values. */\r\n    setToSetupPose() {\r\n        this.setBonesToSetupPose();\r\n        this.setSlotsToSetupPose();\r\n    }\r\n\r\n    /** Sets the bones and constraints to their setup pose values. */\r\n    setBonesToSetupPose() {\r\n        const bones = this.bones;\r\n\r\n        for (let i = 0, n = bones.length; i < n; i++) bones[i].setToSetupPose();\r\n\r\n        const ikConstraints = this.ikConstraints;\r\n\r\n        for (let i = 0, n = ikConstraints.length; i < n; i++) {\r\n            const constraint = ikConstraints[i];\r\n\r\n            constraint.mix = constraint.data.mix;\r\n            constraint.softness = constraint.data.softness;\r\n            constraint.bendDirection = constraint.data.bendDirection;\r\n            constraint.compress = constraint.data.compress;\r\n            constraint.stretch = constraint.data.stretch;\r\n        }\r\n\r\n        const transformConstraints = this.transformConstraints;\r\n\r\n        for (let i = 0, n = transformConstraints.length; i < n; i++) {\r\n            const constraint = transformConstraints[i];\r\n            const data = constraint.data;\r\n\r\n            constraint.mixRotate = data.mixRotate;\r\n            constraint.mixX = data.mixX;\r\n            constraint.mixY = data.mixY;\r\n            constraint.mixScaleX = data.mixScaleX;\r\n            constraint.mixScaleY = data.mixScaleY;\r\n            constraint.mixShearY = data.mixShearY;\r\n        }\r\n\r\n        const pathConstraints = this.pathConstraints;\r\n\r\n        for (let i = 0, n = pathConstraints.length; i < n; i++) {\r\n            const constraint = pathConstraints[i];\r\n            const data = constraint.data;\r\n\r\n            constraint.position = data.position;\r\n            constraint.spacing = data.spacing;\r\n            constraint.mixRotate = data.mixRotate;\r\n            constraint.mixX = data.mixX;\r\n            constraint.mixY = data.mixY;\r\n        }\r\n    }\r\n\r\n    /** Sets the slots and draw order to their setup pose values. */\r\n    setSlotsToSetupPose() {\r\n        const slots = this.slots;\r\n\r\n        Utils.arrayCopy(slots, 0, this.drawOrder, 0, slots.length);\r\n        for (let i = 0, n = slots.length; i < n; i++) slots[i].setToSetupPose();\r\n    }\r\n\r\n    /** @returns May return null. */\r\n    getRootBone() {\r\n        if (this.bones.length == 0) return null;\r\n\r\n        return this.bones[0];\r\n    }\r\n\r\n    /** @returns May be null. */\r\n    findBone(boneName: string) {\r\n        if (!boneName) throw new Error('boneName cannot be null.');\r\n        const bones = this.bones;\r\n\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            const bone = bones[i];\r\n\r\n            if (bone.data.name == boneName) return bone;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** @returns -1 if the bone was not found. */\r\n    findBoneIndex(boneName: string) {\r\n        if (!boneName) throw new Error('boneName cannot be null.');\r\n        const bones = this.bones;\r\n\r\n        for (let i = 0, n = bones.length; i < n; i++) if (bones[i].data.name == boneName) return i;\r\n\r\n        return -1;\r\n    }\r\n\r\n    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\r\n     * repeatedly.\r\n     * @returns May be null. */\r\n    findSlot(slotName: string) {\r\n        if (!slotName) throw new Error('slotName cannot be null.');\r\n        const slots = this.slots;\r\n\r\n        for (let i = 0, n = slots.length; i < n; i++) {\r\n            const slot = slots[i];\r\n\r\n            if (slot.data.name == slotName) return slot;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** @returns -1 if the bone was not found. */\r\n    findSlotIndex(slotName: string) {\r\n        if (!slotName) throw new Error('slotName cannot be null.');\r\n        const slots = this.slots;\r\n\r\n        for (let i = 0, n = slots.length; i < n; i++) if (slots[i].data.name == slotName) return i;\r\n\r\n        return -1;\r\n    }\r\n\r\n    /** Sets a skin by name.\r\n     *\r\n     * See {@link #setSkin()}. */\r\n    setSkinByName(skinName: string) {\r\n        const skin = this.data.findSkin(skinName);\r\n\r\n        if (!skin) throw new Error(`Skin not found: ${skinName}`);\r\n        this.setSkin(skin);\r\n    }\r\n\r\n    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#defaultSkin default skin}. If the\r\n     * skin is changed, {@link #updateCache()} is called.\r\n     *\r\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\r\n     * old skin, each slot's setup mode attachment is attached from the new skin.\r\n     *\r\n     * After changing the skin, the visible attachments can be reset to those attached in the setup pose by calling\r\n     * {@link #setSlotsToSetupPose()}. Also, often {@link AnimationState#apply()} is called before the next time the\r\n     * skeleton is rendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new skin.\r\n     * @param newSkin May be null. */\r\n    setSkin(newSkin: Skin) {\r\n        if (newSkin == this.skin) return;\r\n        if (newSkin) {\r\n            if (this.skin) newSkin.attachAll(this, this.skin);\r\n            else {\r\n                const slots = this.slots;\r\n\r\n                for (let i = 0, n = slots.length; i < n; i++) {\r\n                    const slot = slots[i];\r\n                    const name = slot.data.attachmentName;\r\n\r\n                    if (name) {\r\n                        const attachment = newSkin.getAttachment(i, name);\r\n\r\n                        if (attachment) slot.setAttachment(attachment);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.skin = newSkin;\r\n        this.updateCache();\r\n    }\r\n\r\n    /** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot name and attachment\r\n     * name.\r\n     *\r\n     * See {@link #getAttachment()}.\r\n     * @returns May be null. */\r\n    getAttachmentByName(slotName: string, attachmentName: string): Attachment | null {\r\n        const slot = this.data.findSlot(slotName);\r\n\r\n        if (!slot) throw new Error(`Can't find slot with name ${slotName}`);\r\n\r\n        return this.getAttachment(slot.index, attachmentName);\r\n    }\r\n\r\n    /** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot index and\r\n     * attachment name. First the skin is checked and if the attachment was not found, the default skin is checked.\r\n     *\r\n     * See [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide.\r\n     * @returns May be null. */\r\n    getAttachment(slotIndex: number, attachmentName: string): Attachment | null {\r\n        if (!attachmentName) throw new Error('attachmentName cannot be null.');\r\n        if (this.skin) {\r\n            const attachment = this.skin.getAttachment(slotIndex, attachmentName);\r\n\r\n            if (attachment) return attachment;\r\n        }\r\n        if (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\r\n\r\n        return null;\r\n    }\r\n\r\n    /** A convenience method to set an attachment by finding the slot with {@link #findSlot()}, finding the attachment with\r\n     * {@link #getAttachment()}, then setting the slot's {@link Slot#attachment}.\r\n     * @param attachmentName May be null to clear the slot's attachment. */\r\n    setAttachment(slotName: string, attachmentName: string) {\r\n        if (!slotName) throw new Error('slotName cannot be null.');\r\n        const slots = this.slots;\r\n\r\n        for (let i = 0, n = slots.length; i < n; i++) {\r\n            const slot = slots[i];\r\n\r\n            if (slot.data.name == slotName) {\r\n                let attachment: Attachment | null = null;\r\n\r\n                if (attachmentName) {\r\n                    attachment = this.getAttachment(i, attachmentName);\r\n                    if (!attachment) throw new Error(`Attachment not found: ${attachmentName}, for slot: ${slotName}`);\r\n                }\r\n                slot.setAttachment(attachment);\r\n\r\n                return;\r\n            }\r\n        }\r\n        throw new Error(`Slot not found: ${slotName}`);\r\n    }\r\n\r\n    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\r\n     * than to call it repeatedly.\r\n     * @return May be null. */\r\n    findIkConstraint(constraintName: string) {\r\n        if (!constraintName) throw new Error('constraintName cannot be null.');\r\n        const ikConstraints = this.ikConstraints;\r\n\r\n        for (let i = 0, n = ikConstraints.length; i < n; i++) {\r\n            const ikConstraint = ikConstraints[i];\r\n\r\n            if (ikConstraint.data.name == constraintName) return ikConstraint;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\r\n     * this method than to call it repeatedly.\r\n     * @return May be null. */\r\n    findTransformConstraint(constraintName: string) {\r\n        if (!constraintName) throw new Error('constraintName cannot be null.');\r\n        const transformConstraints = this.transformConstraints;\r\n\r\n        for (let i = 0, n = transformConstraints.length; i < n; i++) {\r\n            const constraint = transformConstraints[i];\r\n\r\n            if (constraint.data.name == constraintName) return constraint;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\r\n     * than to call it repeatedly.\r\n     * @return May be null. */\r\n    findPathConstraint(constraintName: string) {\r\n        if (!constraintName) throw new Error('constraintName cannot be null.');\r\n        const pathConstraints = this.pathConstraints;\r\n\r\n        for (let i = 0, n = pathConstraints.length; i < n; i++) {\r\n            const constraint = pathConstraints[i];\r\n\r\n            if (constraint.data.name == constraintName) return constraint;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose as `{ x: number, y: number, width: number, height: number }`.\r\n     * Note that this method will create temporary objects which can add to garbage collection pressure. Use `getBounds()` if garbage collection is a concern. */\r\n    getBoundsRect() {\r\n        const offset = new Vector2();\r\n        const size = new Vector2();\r\n\r\n        this.getBounds(offset, size);\r\n\r\n        return { x: offset.x, y: offset.y, width: size.x, height: size.y };\r\n    }\r\n\r\n    /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\r\n     * @param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.\r\n     * @param size An output value, the width and height of the AABB.\r\n     * @param temp Working memory to temporarily store attachments' computed world vertices. */\r\n    getBounds(offset: Vector2, size: Vector2, temp: Array<number> = new Array<number>(2)) {\r\n        if (!offset) throw new Error('offset cannot be null.');\r\n        if (!size) throw new Error('size cannot be null.');\r\n        const drawOrder = this.drawOrder;\r\n        let minX = Number.POSITIVE_INFINITY;\r\n        let minY = Number.POSITIVE_INFINITY;\r\n        let maxX = Number.NEGATIVE_INFINITY;\r\n        let maxY = Number.NEGATIVE_INFINITY;\r\n\r\n        for (let i = 0, n = drawOrder.length; i < n; i++) {\r\n            const slot = drawOrder[i];\r\n\r\n            if (!slot.bone.active) continue;\r\n            let verticesLength = 0;\r\n            let vertices: NumberArrayLike | null = null;\r\n            const attachment = slot.getAttachment();\r\n\r\n            if (attachment instanceof RegionAttachment) {\r\n                verticesLength = 8;\r\n                vertices = Utils.setArraySize(temp, verticesLength, 0);\r\n                (<RegionAttachment>attachment).computeWorldVertices(slot, vertices, 0, 2);\r\n            } else if (attachment instanceof MeshAttachment) {\r\n                const mesh = <MeshAttachment>attachment;\r\n\r\n                verticesLength = mesh.worldVerticesLength;\r\n                vertices = Utils.setArraySize(temp, verticesLength, 0);\r\n                mesh.computeWorldVertices(slot, 0, verticesLength, vertices, 0, 2);\r\n            }\r\n            if (vertices) {\r\n                for (let ii = 0, nn = vertices.length; ii < nn; ii += 2) {\r\n                    const x = vertices[ii];\r\n                    const y = vertices[ii + 1];\r\n\r\n                    minX = Math.min(minX, x);\r\n                    minY = Math.min(minY, y);\r\n                    maxX = Math.max(maxX, x);\r\n                    maxY = Math.max(maxY, y);\r\n                }\r\n            }\r\n        }\r\n        offset.set(minX, minY);\r\n        size.set(maxX - minX, maxY - minY);\r\n    }\r\n\r\n    get flipX(): boolean {\r\n        return this.scaleX == -1;\r\n    }\r\n\r\n    set flipX(value: boolean) {\r\n        if (!Skeleton.deprecatedWarning1) {\r\n            Skeleton.deprecatedWarning1 = true;\r\n            console.warn('Spine Deprecation Warning: `Skeleton.flipX/flipY` was deprecated, please use scaleX/scaleY');\r\n        }\r\n        this.scaleX = value ? 1.0 : -1.0;\r\n    }\r\n\r\n    get flipY(): boolean {\r\n        return this.scaleY == -1;\r\n    }\r\n\r\n    set flipY(value: boolean) {\r\n        if (!Skeleton.deprecatedWarning1) {\r\n            Skeleton.deprecatedWarning1 = true;\r\n            console.warn('Spine Deprecation Warning: `Skeleton.flipX/flipY` was deprecated, please use scaleX/scaleY');\r\n        }\r\n        this.scaleY = value ? 1.0 : -1.0;\r\n    }\r\n\r\n    private static deprecatedWarning1 = false;\r\n}\r\n"],"names":["Bone","Slot","IkConstraint","TransformConstraint","PathConstraint","Color","Utils","PathAttachment","MathUtils","settings","Vector2","RegionAttachment","MeshAttachment"],"mappings":"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"}