{"version":3,"file":"TransformConstraint.mjs","sources":["../../src/core/TransformConstraint.ts"],"sourcesContent":["import type { Updatable } from './Updatable';\r\nimport type { TransformConstraintData } from './TransformConstraintData';\r\nimport type { Bone } from './Bone';\r\nimport { MathUtils, Vector2 } from '@pixi-spine/base';\r\nimport type { Skeleton } from './Skeleton';\r\n\r\n/** Stores the current pose for a transform constraint. A transform constraint adjusts the world transform of the constrained\r\n * bones to match that of the target bone.\r\n *\r\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide.\r\n * @public\r\n * */\r\nexport class TransformConstraint implements Updatable {\r\n    /** The transform constraint's setup pose data. */\r\n    data: TransformConstraintData;\r\n\r\n    /** The bones that will be modified by this transform constraint. */\r\n    bones: Array<Bone>;\r\n\r\n    /** The target bone whose world transform will be copied to the constrained bones. */\r\n    target: Bone;\r\n\r\n    mixRotate = 0;\r\n    mixX = 0;\r\n    mixY = 0;\r\n    mixScaleX = 0;\r\n    mixScaleY = 0;\r\n    mixShearY = 0;\r\n\r\n    temp = new Vector2();\r\n    active = false;\r\n\r\n    constructor(data: TransformConstraintData, skeleton: Skeleton) {\r\n        if (!data) throw new Error('data cannot be null.');\r\n        if (!skeleton) throw new Error('skeleton cannot be null.');\r\n        this.data = data;\r\n        this.mixRotate = data.mixRotate;\r\n        this.mixX = data.mixX;\r\n        this.mixY = data.mixY;\r\n        this.mixScaleX = data.mixScaleX;\r\n        this.mixScaleY = data.mixScaleY;\r\n        this.mixShearY = data.mixShearY;\r\n        this.bones = new Array<Bone>();\r\n        for (let i = 0; i < data.bones.length; i++) {\r\n            const bone = skeleton.findBone(data.bones[i].name);\r\n\r\n            if (!bone) throw new Error(`Couldn't find bone ${data.bones[i].name}.`);\r\n            this.bones.push(bone);\r\n        }\r\n        const target = skeleton.findBone(data.target.name);\r\n\r\n        if (!target) throw new Error(`Couldn't find target bone ${data.target.name}.`);\r\n        this.target = target;\r\n    }\r\n\r\n    isActive() {\r\n        return this.active;\r\n    }\r\n\r\n    update() {\r\n        if (this.mixRotate == 0 && this.mixX == 0 && this.mixY == 0 && this.mixScaleX == 0 && this.mixScaleX == 0 && this.mixShearY == 0) return;\r\n\r\n        if (this.data.local) {\r\n            if (this.data.relative) this.applyRelativeLocal();\r\n            else this.applyAbsoluteLocal();\r\n        } else if (this.data.relative) this.applyRelativeWorld();\r\n        else this.applyAbsoluteWorld();\r\n    }\r\n\r\n    applyAbsoluteWorld() {\r\n        const mixRotate = this.mixRotate;\r\n        const mixX = this.mixX;\r\n        const mixY = this.mixY;\r\n        const mixScaleX = this.mixScaleX;\r\n        const mixScaleY = this.mixScaleY;\r\n        const mixShearY = this.mixShearY;\r\n        const translate = mixX != 0 || mixY != 0;\r\n\r\n        const target = this.target;\r\n        const targetMat = target.matrix;\r\n        const ta = targetMat.a;\r\n        const tb = targetMat.c;\r\n        const tc = targetMat.b;\r\n        const td = targetMat.d;\r\n        const degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\r\n        const offsetRotation = this.data.offsetRotation * degRadReflect;\r\n        const offsetShearY = this.data.offsetShearY * degRadReflect;\r\n\r\n        const bones = this.bones;\r\n\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            const bone = bones[i];\r\n            const mat = bone.matrix;\r\n\r\n            if (mixRotate != 0) {\r\n                const a = mat.a;\r\n                const b = mat.c;\r\n                const c = mat.b;\r\n                const d = mat.d;\r\n                let r = Math.atan2(tc, ta) - Math.atan2(c, a) + offsetRotation;\r\n\r\n                if (r > MathUtils.PI) r -= MathUtils.PI2;\r\n                else if (r < -MathUtils.PI)\r\n                    //\r\n                    r += MathUtils.PI2;\r\n                r *= mixRotate;\r\n                const cos = Math.cos(r);\r\n                const sin = Math.sin(r);\r\n\r\n                mat.a = cos * a - sin * c;\r\n                mat.c = cos * b - sin * d;\r\n                mat.b = sin * a + cos * c;\r\n                mat.d = sin * b + cos * d;\r\n            }\r\n\r\n            if (translate) {\r\n                const temp = this.temp;\r\n\r\n                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\r\n                mat.tx += (temp.x - mat.tx) * mixX;\r\n                mat.ty += (temp.y - mat.ty) * mixY;\r\n            }\r\n\r\n            if (mixScaleX != 0) {\r\n                let s = Math.sqrt(mat.a * mat.a + mat.b * mat.b);\r\n\r\n                if (s != 0) s = (s + (Math.sqrt(ta * ta + tc * tc) - s + this.data.offsetScaleX) * mixScaleX) / s;\r\n                mat.a *= s;\r\n                mat.b *= s;\r\n            }\r\n            if (mixScaleY != 0) {\r\n                let s = Math.sqrt(mat.c * mat.c + mat.d * mat.d);\r\n\r\n                if (s != 0) s = (s + (Math.sqrt(tb * tb + td * td) - s + this.data.offsetScaleY) * mixScaleY) / s;\r\n                mat.c *= s;\r\n                mat.d *= s;\r\n            }\r\n\r\n            if (mixShearY > 0) {\r\n                const b = mat.c;\r\n                const d = mat.d;\r\n                const by = Math.atan2(d, b);\r\n                let r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(mat.b, mat.a));\r\n\r\n                if (r > MathUtils.PI) r -= MathUtils.PI2;\r\n                else if (r < -MathUtils.PI)\r\n                    //\r\n                    r += MathUtils.PI2;\r\n                r = by + (r + offsetShearY) * mixShearY;\r\n                const s = Math.sqrt(b * b + d * d);\r\n\r\n                mat.c = Math.cos(r) * s;\r\n                mat.d = Math.sin(r) * s;\r\n            }\r\n\r\n            bone.updateAppliedTransform();\r\n        }\r\n    }\r\n\r\n    applyRelativeWorld() {\r\n        const mixRotate = this.mixRotate;\r\n        const mixX = this.mixX;\r\n        const mixY = this.mixY;\r\n        const mixScaleX = this.mixScaleX;\r\n        const mixScaleY = this.mixScaleY;\r\n        const mixShearY = this.mixShearY;\r\n        const translate = mixX != 0 || mixY != 0;\r\n\r\n        const target = this.target;\r\n        const targetMat = target.matrix;\r\n        const ta = targetMat.a;\r\n        const tb = targetMat.c;\r\n        const tc = targetMat.b;\r\n        const td = targetMat.d;\r\n        const degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\r\n        const offsetRotation = this.data.offsetRotation * degRadReflect;\r\n        const offsetShearY = this.data.offsetShearY * degRadReflect;\r\n\r\n        const bones = this.bones;\r\n\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            const bone = bones[i];\r\n            const mat = bone.matrix;\r\n\r\n            if (mixRotate != 0) {\r\n                const a = mat.a;\r\n                const b = mat.c;\r\n                const c = mat.b;\r\n                const d = mat.d;\r\n                let r = Math.atan2(tc, ta) + offsetRotation;\r\n\r\n                if (r > MathUtils.PI) r -= MathUtils.PI2;\r\n                else if (r < -MathUtils.PI)\r\n                    //\r\n                    r += MathUtils.PI2;\r\n                r *= mixRotate;\r\n                const cos = Math.cos(r);\r\n                const sin = Math.sin(r);\r\n\r\n                mat.a = cos * a - sin * c;\r\n                mat.c = cos * b - sin * d;\r\n                mat.b = sin * a + cos * c;\r\n                mat.d = sin * b + cos * d;\r\n            }\r\n\r\n            if (translate) {\r\n                const temp = this.temp;\r\n\r\n                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\r\n                mat.tx += temp.x * mixX;\r\n                mat.ty += temp.y * mixY;\r\n            }\r\n\r\n            if (mixScaleX != 0) {\r\n                const s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * mixScaleX + 1;\r\n\r\n                mat.a *= s;\r\n                mat.b *= s;\r\n            }\r\n            if (mixScaleY != 0) {\r\n                const s = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * mixScaleY + 1;\r\n\r\n                mat.c *= s;\r\n                mat.d *= s;\r\n            }\r\n\r\n            if (mixShearY > 0) {\r\n                let r = Math.atan2(td, tb) - Math.atan2(tc, ta);\r\n\r\n                if (r > MathUtils.PI) r -= MathUtils.PI2;\r\n                else if (r < -MathUtils.PI)\r\n                    //\r\n                    r += MathUtils.PI2;\r\n                const b = mat.c;\r\n                const d = mat.d;\r\n\r\n                r = Math.atan2(d, b) + (r - MathUtils.PI / 2 + offsetShearY) * mixShearY;\r\n                const s = Math.sqrt(b * b + d * d);\r\n\r\n                mat.c = Math.cos(r) * s;\r\n                mat.d = Math.sin(r) * s;\r\n            }\r\n\r\n            bone.updateAppliedTransform();\r\n        }\r\n    }\r\n\r\n    applyAbsoluteLocal() {\r\n        const mixRotate = this.mixRotate;\r\n        const mixX = this.mixX;\r\n        const mixY = this.mixY;\r\n        const mixScaleX = this.mixScaleX;\r\n        const mixScaleY = this.mixScaleY;\r\n        const mixShearY = this.mixShearY;\r\n\r\n        const target = this.target;\r\n\r\n        const bones = this.bones;\r\n\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            const bone = bones[i];\r\n\r\n            let rotation = bone.arotation;\r\n\r\n            if (mixRotate != 0) {\r\n                let r = target.arotation - rotation + this.data.offsetRotation;\r\n\r\n                r -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\r\n                rotation += r * mixRotate;\r\n            }\r\n\r\n            let x = bone.ax;\r\n            let y = bone.ay;\r\n\r\n            x += (target.ax - x + this.data.offsetX) * mixX;\r\n            y += (target.ay - y + this.data.offsetY) * mixY;\r\n\r\n            let scaleX = bone.ascaleX;\r\n            let scaleY = bone.ascaleY;\r\n\r\n            if (mixScaleX != 0 && scaleX != 0) scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * mixScaleX) / scaleX;\r\n            if (mixScaleY != 0 && scaleY != 0) scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * mixScaleY) / scaleY;\r\n\r\n            let shearY = bone.ashearY;\r\n\r\n            if (mixShearY != 0) {\r\n                let r = target.ashearY - shearY + this.data.offsetShearY;\r\n\r\n                r -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\r\n                shearY += r * mixShearY;\r\n            }\r\n\r\n            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\r\n        }\r\n    }\r\n\r\n    applyRelativeLocal() {\r\n        const mixRotate = this.mixRotate;\r\n        const mixX = this.mixX;\r\n        const mixY = this.mixY;\r\n        const mixScaleX = this.mixScaleX;\r\n        const mixScaleY = this.mixScaleY;\r\n        const mixShearY = this.mixShearY;\r\n\r\n        const target = this.target;\r\n\r\n        const bones = this.bones;\r\n\r\n        for (let i = 0, n = bones.length; i < n; i++) {\r\n            const bone = bones[i];\r\n\r\n            const rotation = bone.arotation + (target.arotation + this.data.offsetRotation) * mixRotate;\r\n            const x = bone.ax + (target.ax + this.data.offsetX) * mixX;\r\n            const y = bone.ay + (target.ay + this.data.offsetY) * mixY;\r\n            const scaleX = bone.ascaleX * ((target.ascaleX - 1 + this.data.offsetScaleX) * mixScaleX + 1);\r\n            const scaleY = bone.ascaleY * ((target.ascaleY - 1 + this.data.offsetScaleY) * mixScaleY + 1);\r\n            const shearY = bone.ashearY + (target.ashearY + this.data.offsetShearY) * mixShearY;\r\n\r\n            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\r\n        }\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}