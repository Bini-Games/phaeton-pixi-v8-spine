{"version":3,"file":"Sequence.js","sources":["../../../src/core/attachments/Sequence.ts"],"sourcesContent":["import { Utils, TextureRegion, IHasTextureRegion, ISequence } from '@pixi-spine/base';\r\nimport type { Slot } from '../Slot';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class Sequence implements ISequence {\r\n    private static _nextID = 0;\r\n\r\n    id = Sequence.nextID();\r\n    regions: TextureRegion[];\r\n    start = 0;\r\n    digits = 0;\r\n    /** The index of the region to show for the setup pose. */\r\n    setupIndex = 0;\r\n\r\n    constructor(count: number) {\r\n        this.regions = new Array<TextureRegion>(count);\r\n    }\r\n\r\n    copy(): Sequence {\r\n        const copy = new Sequence(this.regions.length);\r\n\r\n        Utils.arrayCopy(this.regions, 0, copy.regions, 0, this.regions.length);\r\n        copy.start = this.start;\r\n        copy.digits = this.digits;\r\n        copy.setupIndex = this.setupIndex;\r\n\r\n        return copy;\r\n    }\r\n\r\n    apply(slot: Slot, attachment: IHasTextureRegion) {\r\n        let index = slot.sequenceIndex;\r\n\r\n        if (index == -1) index = this.setupIndex;\r\n        if (index >= this.regions.length) index = this.regions.length - 1;\r\n        const region = this.regions[index];\r\n\r\n        if (attachment.region != region) {\r\n            attachment.region = region;\r\n            // attachment.updateRegion();\r\n        }\r\n    }\r\n\r\n    getPath(basePath: string, index: number): string {\r\n        let result = basePath;\r\n        const frame = (this.start + index).toString();\r\n\r\n        for (let i = this.digits - frame.length; i > 0; i--) result += '0';\r\n        result += frame;\r\n\r\n        return result;\r\n    }\r\n\r\n    private static nextID(): number {\r\n        return Sequence._nextID++;\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport enum SequenceMode {\r\n    hold = 0,\r\n    once = 1,\r\n    loop = 2,\r\n    pingpong = 3,\r\n    onceReverse = 4,\r\n    loopReverse = 5,\r\n    pingpongReverse = 6,\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport const SequenceModeValues = [\r\n    SequenceMode.hold,\r\n    SequenceMode.once,\r\n    SequenceMode.loop,\r\n    SequenceMode.pingpong,\r\n    SequenceMode.onceReverse,\r\n    SequenceMode.loopReverse,\r\n    SequenceMode.pingpongReverse,\r\n];\r\n"],"names":["Utils","SequenceMode"],"mappings":"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"}